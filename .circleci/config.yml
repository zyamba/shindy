# Scala CircleCI 2.0 configuration file
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk
      - image: circleci/postgres:9.6.2-alpine
        environment:
          POSTGRES_USER: eventstore
          POSTGRES_DB: eventstore
          POSTGRES_PASSWORD: essecret

    working_directory: ~/repo

    environment:
      CC_TEST_REPORTER_ID: "f98d0e5c96a269fe86727790a94589b5a931354cee8f0a073de43e150c35cc30"
      JVM_OPTS: -Xmx512m
      TERM: dumb
      CODECOV_TOKEN: "e9457e37-4ff6-417c-b52a-3fbe41652669"
      PG_DB: eventstore
      PG_USER: eventstore
      PG_PASSWORD: essecret

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v2-dependencies-{{ checksum "project/Dependencies.scala" }}
            # fallback to using the latest cache if no exact match is found
            - v2-dependencies-
      - run:
          name: Setup Code Climate test-reporter
          command: |
            # download test reporter as a static binary
            curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
            chmod +x ./cc-test-reporter

      # fetch dependencies
      - run: cat /dev/null | sbt +test:compile

      - save_cache:
          paths:
            - ~/.ivy2
            - ~/.sbt
          key: v2-dependencies-{{ checksum "project/Dependencies.scala" }}

      - run:
          name: Run 2.12 and 2.13 tests
          command: |
            cat /dev/null | sbt clean +test +db:test

      - run:
          name: Run only 2.13 tests with coverage
          command: |
            cat /dev/null | sbt clean coverage test:test db:test coverageReport coverageAggregate

      - store_test_results:
          path: target/scala-2.13/coverage-report

      - store_artifacts:
          path: target/scala-2.13/scoverage-report
          
      - run:
          name: Codecov report
          command: |
            bash <(curl -s https://codecov.io/bash)
        

      - run:
          name: Format coverage report
          command: |
            ./cc-test-reporter format-coverage target/scala-*/coverage-report/cobertura.xml --input-type=cobertura

      - run:
          name: Upload coverage report
          command: |
            ./cc-test-reporter upload-coverage
